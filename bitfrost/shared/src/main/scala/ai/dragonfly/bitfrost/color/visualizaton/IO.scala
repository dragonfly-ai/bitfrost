package ai.dragonfly.bitfrost.color.visualizaton

import ai.dragonfly.bitfrost.cie.WorkingSpace
import ai.dragonfly.bitfrost.color.space.TetrahedralVolume
import ai.dragonfly.math.vector.*

import java.io.PrintWriter

object IO {

  def writeMesh(workingSpace: WorkingSpace)(tetrahedralVolume: TetrahedralVolume, v2c: Vector3 => workingSpace.ARGB32, out: java.io.OutputStream): Unit = {
    val sout: PrintWriter = new PrintWriter(out)

    sout.write(
      s"""ply
format ascii 1.0
comment generated by bitfrost: https://github.com/dragonfly-ai/bitfrost
comment Mesh reprsentation of Color Space $this
element vertex ${tetrahedralVolume.tetrahedra.length * 3}
property float x
property float y
property float z
property uchar red
property uchar green
property uchar blue
property uchar alpha
element face ${tetrahedralVolume.tetrahedra.length}
property list uchar uint vertex_indices
end_header
"""
    )

    def writeVertex(v: Vector3): Unit = {
      val c: workingSpace.ARGB32 = v2c(v)
      sout.write(s"${v.x} ${v.y} ${v.z} ${c.red} ${c.green} ${c.blue} 255\n")
    }

    var vi: Int = 0
    var fi: Int = 0

    val sbFaces = StringBuilder()
    var nullTets = 0
    for (tetrahedron <- tetrahedralVolume.tetrahedra) {

      if (tetrahedron == null) nullTets += 1
      else {
        tetrahedron.vertices.tail.foreach((v: Vector3) => writeVertex(v))

        sbFaces.append(s"3 $vi ${vi + 1} ${vi + 2}\n")

        fi += 1

        vi += 3
      }
    }

    println(s"nullTets = $nullTets vs length ${tetrahedralVolume.tetrahedra.length}")

    sout.write(sbFaces.toString())
    sout.flush()

  }
}