package ai.dragonfly.bitfrost.visualization

import ai.dragonfly.math.vector.Vector3
import ai.dragonfly.bitfrost.ColorContext.sRGB.ARGB32
import java.io.PrintWriter

object PLY {

  def write(cgvm: ColorGamutVolumeMesh, out: java.io.OutputStream): Unit = {
    val sout: PrintWriter = new PrintWriter(out)

    sout.write(
      s"""ply
format ascii 1.0
comment generated by bitfrost: https://github.com/dragonfly-ai/bitfrost
element vertex ${cgvm.mesh.vertices.length}
property float x
property float y
property float z
property uchar red
property uchar green
property uchar blue
property uchar alpha
element face ${cgvm.mesh.triangles.length}
property list uchar uint vertex_indices
end_header
"""
    )

    for (i <- cgvm.mesh.vertices.indices) {
      val v:Vector3 = cgvm.mesh.vertices(i)
      val c:ARGB32 = cgvm.vertexColorMapper(v)
      sout.write(s"${v.x} ${v.y} ${v.z} ${c.red} ${c.green} ${c.blue} ${c.alpha}\n")
    }

    for (triangle <- cgvm.mesh.triangles) {
      sout.write(s"3 ${triangle.v0} ${triangle.v1} ${triangle.v2}\n")
    }

    sout.flush()
  }

}
