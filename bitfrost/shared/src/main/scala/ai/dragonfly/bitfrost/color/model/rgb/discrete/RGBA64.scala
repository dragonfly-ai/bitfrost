package ai.dragonfly.bitfrost.color.model.rgb.discrete

import ai.dragonfly.bitfrost.*
import ai.dragonfly.bitfrost.cie.WorkingSpace
import ai.dragonfly.bitfrost.color.model.*
import ai.dragonfly.math.{Random, squareInPlace}

import scala.language.implicitConversions

trait RGBA64 extends DiscreteRGB { self: WorkingSpace =>

  given Conversion[Long, RGBA64] with
    def apply(rgba: Long): RGBA64 = RGBA64(rgba)

  given Conversion[RGBA64, Long] with
    def apply(c: RGBA64): Long = c.rgba

  object RGBA64 extends UtilDiscreteRGB64[RGBA64] {
    def apply(rgba: Long): RGBA64 = new RGBA64(rgba)

    /**
     * Factory method to create a fully opaque RGBA64 instance from separate, specified red, green, blue components and
     * a default alpha value of 65535.
     * Parameter values are derived from the least significant byte.  Integer values that range outside of [0-65535] may
     * give unexpected results.  For values taken from user input, sensors, or otherwise uncertain sources, consider using
     * the factory method in the Color companion object.
     *
     * @see [[ai.dragonfly.color.ColorVectorSpace.rgba]] for a method of constructing RGBA64 objects that validates inputs.
     * @param red   integer value from [0-65535] representing the red component in RGB space.
     * @param green integer value from [0-65535] representing the green component in RGB space.
     * @param blue  integer value from [0-65535] representing the blue component in RGB space.
     * @return an instance of the RGBA64 case class.
     * @example {{{ val c = RGBA64(72,105,183) }}}
     */
    def apply(red: Int, green: Int, blue: Int): RGBA64 = apply(red, green, blue, MAX)


    /**
     * Factory method to create an RGBA64 instance from separate, specified red, green, blue, and alpha components.
     * Parameter values are derived from the least significant byte.  Integer values that range outside of [0-65535] may
     * give unexpected results.  For values taken from user input, sensors, or otherwise uncertain sources, consider using
     * the factory method in the Color companion object.
     *
     * @see [[ai.dragonfly.color.RGBA64.getIfValid]] for a method of constructing RGBA64 objects with input validation.
     * @param alpha integer value from [0-65535] representing the alpha component in RGBA64 space.  Defaults to 65535.
     * @param red   integer value from [0-65535] representing the red component in RGB space.
     * @param green integer value from [0-65535] representing the green component in RGB space.
     * @param blue  integer value from [0-65535] representing the blue component in RGB space.
     * @return an instance of the RGBA64 case class.
     * @example {{{ val c = RGBA64(72,105,183) }}}
     */
    def apply(red: Int, green: Int, blue: Int, alpha: Int): RGBA64 = apply((red << 48) | (green << 32) | (blue << 16) | alpha)

    /**
     * Factory method to create a fully Opaque RGBA64 color; one with an alpha value of 65535.
     * Because this method validates each intensity, it sacrifices performance
     * for safety.  Although well suited for parsing color data generated by sensors or user input, this method undercuts
     * performance in applications like reading image data.
     *
     * To skip validation and minimize overhead, @see [[ai.dragonfly.color.RGBA64.apply]]
     *
     * @param red   integer value from [0-65535] representing the red component in RGB space.
     * @param green integer value from [0-65535] representing the green component in RGB space.
     * @param blue  integer value from [0-65535] representing the blue component in RGB space.
     * @return an instance of the RGBA64 class or None if fed invalid input.
     */
    def getIfValid(red: Int, green: Int, blue: Int): Option[RGBA64] = getIfValid(red, green, blue, MAX)

    /**
     * Factory method to create an RGBA64 color.  Because this method validates each intensity, it sacrifices performance
     * for safety.  Although well suited for parsing color data generated by sensors or user input, this method undercuts
     * performance in applications like reading image data.
     *
     * To skip validation and minimize overhead, @see [[ai.dragonfly.color.RGBA64.apply]]
     *
     * @param alpha integer value from [0-65535] representing the alpha component in RGBA64 space.
     * @param red   integer value from [0-65535] representing the red component in RGB space.
     * @param green integer value from [0-65535] representing the green component in RGB space.
     * @param blue  integer value from [0-65535] representing the blue component in RGB space.
     * @return an instance of the C class or None if fed invalid input.
     */
    def getIfValid(red: Int, green: Int, blue: Int, alpha: Int): Option[RGBA64] = {
      if (valid(red, green, blue, alpha)) Some(apply(red, green, blue, alpha))
      else None
    }

    inline def clamp(red: Double, green: Double, blue: Double): Long = clamp(red, green, blue, MAX)

    override def fromXYZ(xyz: XYZ): RGBA64 = fromRGB(xyz.toRGB)

    def fromRGB(rgb: RGB): RGBA64 = clamp(rgb.red * MAX, rgb.green * MAX, rgb.blue * MAX)

    override def weightedAverage(c1: RGBA64, w1: Double, c2: RGBA64, w2: Double): RGBA64 = RGBA64(
      (((c1.red * w1) + (c2.red * w2)) / 2.0).toInt,
      (((c1.green * w1) + (c2.green * w2)) / 2.0).toInt,
      (((c1.blue * w1) + (c2.blue * w2)) / 2.0).toInt,
      (((c1.alpha * w1) + (c2.alpha * w2)) / 2.0).toInt
    )

    /**
     * Use Color.random() to obtain a random color in the form of an RGBA64 instance.
     * This method executes quickly and without memory costs, but the RGB color space biases toward cool colors.
     * In contrast, the Color.randomFromLabSpace() method takes seconds to initialize and has a memory footprint of several megabytes
     * However, it samples from a perceptually uniform color space and avoids the bias toward cool colors.
     * This method samples the Red, Green, and Blue color components uniformly, but always returns 65535 for the alpha component.
     *
     * @return a randomly generated color sampled from the RGB Color Space.
     */
    override def random(r: scala.util.Random = Random.defaultRandom): RGBA64 = RGBA64((r.nextLong(0xFFFFFFFFFFFFL)<< 16) | 0xFFFFL)
  }


  /**
   * RGBA64 is the primary case class for representing colors in RGBA64 space.
   *
   * @constructor Create a new RGBA64 object from an Int.
   * @see [[https://en.wikipedia.org/wiki/RGB_color_space]] for more information on the RGB color space.
   * @param rgba a 64 bit integer that represents this color in RGBA64 space.
   *             The most significant byte encodes the alpha value, the second most significant byte encodes red,
   *             the third most significant byte encodes green, and the least significant byte encodes blue.
   * @return an instance of the RGBA64 case class.
   * @example {{{
   * val c = RGBA64(-1)  // returns fully opaque white
   * c.toString()  // returns "RGBA64(65535,65535,65535,65535)"
   * RGBA64(0xFF0000FF).toString() // returns "RGBA64(65535,0,0,65535)"
   * }}}
   */
  case class RGBA64(rgba: Long) extends DiscreteRGB[RGBA64] {

    /**
     * @return the red component of this color in RGBA64 space.
     */
    inline def red: Int = (rgba >> 48 & 0xFFFFL).toInt

    /**
     * @return the green component of this color in RGBA64 space.
     */
    inline def green: Int = (rgba >> 32 & 0xFFFFL).toInt

    /**
     * @return the blue component of this color in RGBA64 space.
     */
    inline def blue: Int = (rgba >> 16 & 0xFFFFL).toInt

    /**
     * @return the alpha component of this color in RGBA64 space.
     */
    inline def alpha: Int = (rgba & 0xFFFFL).toInt

    override def toRGB: RGB = {
      import RGBA64.MAXD
      RGB(red.toDouble / MAXD, green.toDouble / MAXD, blue.toDouble / MAXD)
    }

    override def similarity(that: RGBA64): Double = RGBA64.similarity(this, that)

    /**
     * @return true if these colors are equal in RGBA space, false otherwise
     */
    override def equals(obj: Any): Boolean = obj match {
      case that: RGBA64 => this.rgba == that.rgba
      case _ => false
    }

    /**
     * @return a hexadecimal string representing the rgba integer for this color.
     * @example {{{
     * val c = RGBA(72,105,183)
     * c.hex() // returns "ff4869b7"
     * }}}
     */
    def hex(): String = java.lang.Long.toHexString(rgba)

    override def toString: String = s"RGBA64($red, $green, $blue, $alpha)"
  }

}
